# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Mykytea', [dirname(__file__)])
        except ImportError:
            import _Mykytea
            return _Mykytea
        if fp is not None:
            try:
                _mod = imp.load_module('_Mykytea', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _Mykytea = swig_import_helper()
    del swig_import_helper
else:
    import _Mykytea
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Mykytea.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _Mykytea.SwigPyIterator_value(self)
    def incr(self, n = 1): return _Mykytea.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _Mykytea.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _Mykytea.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _Mykytea.SwigPyIterator_equal(self, *args)
    def copy(self): return _Mykytea.SwigPyIterator_copy(self)
    def next(self): return _Mykytea.SwigPyIterator_next(self)
    def __next__(self): return _Mykytea.SwigPyIterator___next__(self)
    def previous(self): return _Mykytea.SwigPyIterator_previous(self)
    def advance(self, *args): return _Mykytea.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _Mykytea.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _Mykytea.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _Mykytea.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _Mykytea.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _Mykytea.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _Mykytea.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _Mykytea.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class StringVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _Mykytea.StringVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _Mykytea.StringVector___nonzero__(self)
    def __bool__(self): return _Mykytea.StringVector___bool__(self)
    def __len__(self): return _Mykytea.StringVector___len__(self)
    def pop(self): return _Mykytea.StringVector_pop(self)
    def __getslice__(self, *args): return _Mykytea.StringVector___getslice__(self, *args)
    def __setslice__(self, *args): return _Mykytea.StringVector___setslice__(self, *args)
    def __delslice__(self, *args): return _Mykytea.StringVector___delslice__(self, *args)
    def __delitem__(self, *args): return _Mykytea.StringVector___delitem__(self, *args)
    def __getitem__(self, *args): return _Mykytea.StringVector___getitem__(self, *args)
    def __setitem__(self, *args): return _Mykytea.StringVector___setitem__(self, *args)
    def append(self, *args): return _Mykytea.StringVector_append(self, *args)
    def empty(self): return _Mykytea.StringVector_empty(self)
    def size(self): return _Mykytea.StringVector_size(self)
    def clear(self): return _Mykytea.StringVector_clear(self)
    def swap(self, *args): return _Mykytea.StringVector_swap(self, *args)
    def get_allocator(self): return _Mykytea.StringVector_get_allocator(self)
    def begin(self): return _Mykytea.StringVector_begin(self)
    def end(self): return _Mykytea.StringVector_end(self)
    def rbegin(self): return _Mykytea.StringVector_rbegin(self)
    def rend(self): return _Mykytea.StringVector_rend(self)
    def pop_back(self): return _Mykytea.StringVector_pop_back(self)
    def erase(self, *args): return _Mykytea.StringVector_erase(self, *args)
    def __init__(self, *args): 
        this = _Mykytea.new_StringVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _Mykytea.StringVector_push_back(self, *args)
    def front(self): return _Mykytea.StringVector_front(self)
    def back(self): return _Mykytea.StringVector_back(self)
    def assign(self, *args): return _Mykytea.StringVector_assign(self, *args)
    def resize(self, *args): return _Mykytea.StringVector_resize(self, *args)
    def insert(self, *args): return _Mykytea.StringVector_insert(self, *args)
    def reserve(self, *args): return _Mykytea.StringVector_reserve(self, *args)
    def capacity(self): return _Mykytea.StringVector_capacity(self)
    __swig_destroy__ = _Mykytea.delete_StringVector
    __del__ = lambda self : None;
StringVector_swigregister = _Mykytea.StringVector_swigregister
StringVector_swigregister(StringVector)

class Pairsd(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Pairsd, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Pairsd, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Mykytea.new_Pairsd(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["first"] = _Mykytea.Pairsd_first_set
    __swig_getmethods__["first"] = _Mykytea.Pairsd_first_get
    if _newclass:first = _swig_property(_Mykytea.Pairsd_first_get, _Mykytea.Pairsd_first_set)
    __swig_setmethods__["second"] = _Mykytea.Pairsd_second_set
    __swig_getmethods__["second"] = _Mykytea.Pairsd_second_get
    if _newclass:second = _swig_property(_Mykytea.Pairsd_second_get, _Mykytea.Pairsd_second_set)
    def __len__(self): return 2
    def __repr__(self): return str((self.first, self.second))
    def __getitem__(self, index): 
      if not (index % 2): 
        return self.first
      else:
        return self.second
    def __setitem__(self, index, val):
      if not (index % 2): 
        self.first = val
      else:
        self.second = val
    __swig_destroy__ = _Mykytea.delete_Pairsd
    __del__ = lambda self : None;
Pairsd_swigregister = _Mykytea.Pairsd_swigregister
Pairsd_swigregister(Pairsd)

class PairVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PairVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PairVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _Mykytea.PairVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _Mykytea.PairVector___nonzero__(self)
    def __bool__(self): return _Mykytea.PairVector___bool__(self)
    def __len__(self): return _Mykytea.PairVector___len__(self)
    def pop(self): return _Mykytea.PairVector_pop(self)
    def __getslice__(self, *args): return _Mykytea.PairVector___getslice__(self, *args)
    def __setslice__(self, *args): return _Mykytea.PairVector___setslice__(self, *args)
    def __delslice__(self, *args): return _Mykytea.PairVector___delslice__(self, *args)
    def __delitem__(self, *args): return _Mykytea.PairVector___delitem__(self, *args)
    def __getitem__(self, *args): return _Mykytea.PairVector___getitem__(self, *args)
    def __setitem__(self, *args): return _Mykytea.PairVector___setitem__(self, *args)
    def append(self, *args): return _Mykytea.PairVector_append(self, *args)
    def empty(self): return _Mykytea.PairVector_empty(self)
    def size(self): return _Mykytea.PairVector_size(self)
    def clear(self): return _Mykytea.PairVector_clear(self)
    def swap(self, *args): return _Mykytea.PairVector_swap(self, *args)
    def get_allocator(self): return _Mykytea.PairVector_get_allocator(self)
    def begin(self): return _Mykytea.PairVector_begin(self)
    def end(self): return _Mykytea.PairVector_end(self)
    def rbegin(self): return _Mykytea.PairVector_rbegin(self)
    def rend(self): return _Mykytea.PairVector_rend(self)
    def pop_back(self): return _Mykytea.PairVector_pop_back(self)
    def erase(self, *args): return _Mykytea.PairVector_erase(self, *args)
    def __init__(self, *args): 
        this = _Mykytea.new_PairVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _Mykytea.PairVector_push_back(self, *args)
    def front(self): return _Mykytea.PairVector_front(self)
    def back(self): return _Mykytea.PairVector_back(self)
    def assign(self, *args): return _Mykytea.PairVector_assign(self, *args)
    def resize(self, *args): return _Mykytea.PairVector_resize(self, *args)
    def insert(self, *args): return _Mykytea.PairVector_insert(self, *args)
    def reserve(self, *args): return _Mykytea.PairVector_reserve(self, *args)
    def capacity(self): return _Mykytea.PairVector_capacity(self)
    __swig_destroy__ = _Mykytea.delete_PairVector
    __del__ = lambda self : None;
PairVector_swigregister = _Mykytea.PairVector_swigregister
PairVector_swigregister(PairVector)

class PairVectorVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PairVectorVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PairVectorVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _Mykytea.PairVectorVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _Mykytea.PairVectorVector___nonzero__(self)
    def __bool__(self): return _Mykytea.PairVectorVector___bool__(self)
    def __len__(self): return _Mykytea.PairVectorVector___len__(self)
    def pop(self): return _Mykytea.PairVectorVector_pop(self)
    def __getslice__(self, *args): return _Mykytea.PairVectorVector___getslice__(self, *args)
    def __setslice__(self, *args): return _Mykytea.PairVectorVector___setslice__(self, *args)
    def __delslice__(self, *args): return _Mykytea.PairVectorVector___delslice__(self, *args)
    def __delitem__(self, *args): return _Mykytea.PairVectorVector___delitem__(self, *args)
    def __getitem__(self, *args): return _Mykytea.PairVectorVector___getitem__(self, *args)
    def __setitem__(self, *args): return _Mykytea.PairVectorVector___setitem__(self, *args)
    def append(self, *args): return _Mykytea.PairVectorVector_append(self, *args)
    def empty(self): return _Mykytea.PairVectorVector_empty(self)
    def size(self): return _Mykytea.PairVectorVector_size(self)
    def clear(self): return _Mykytea.PairVectorVector_clear(self)
    def swap(self, *args): return _Mykytea.PairVectorVector_swap(self, *args)
    def get_allocator(self): return _Mykytea.PairVectorVector_get_allocator(self)
    def begin(self): return _Mykytea.PairVectorVector_begin(self)
    def end(self): return _Mykytea.PairVectorVector_end(self)
    def rbegin(self): return _Mykytea.PairVectorVector_rbegin(self)
    def rend(self): return _Mykytea.PairVectorVector_rend(self)
    def pop_back(self): return _Mykytea.PairVectorVector_pop_back(self)
    def erase(self, *args): return _Mykytea.PairVectorVector_erase(self, *args)
    def __init__(self, *args): 
        this = _Mykytea.new_PairVectorVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _Mykytea.PairVectorVector_push_back(self, *args)
    def front(self): return _Mykytea.PairVectorVector_front(self)
    def back(self): return _Mykytea.PairVectorVector_back(self)
    def assign(self, *args): return _Mykytea.PairVectorVector_assign(self, *args)
    def resize(self, *args): return _Mykytea.PairVectorVector_resize(self, *args)
    def insert(self, *args): return _Mykytea.PairVectorVector_insert(self, *args)
    def reserve(self, *args): return _Mykytea.PairVectorVector_reserve(self, *args)
    def capacity(self): return _Mykytea.PairVectorVector_capacity(self)
    __swig_destroy__ = _Mykytea.delete_PairVectorVector
    __del__ = lambda self : None;
PairVectorVector_swigregister = _Mykytea.PairVectorVector_swigregister
PairVectorVector_swigregister(PairVectorVector)

class TagsVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TagsVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TagsVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _Mykytea.TagsVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _Mykytea.TagsVector___nonzero__(self)
    def __bool__(self): return _Mykytea.TagsVector___bool__(self)
    def __len__(self): return _Mykytea.TagsVector___len__(self)
    def pop(self): return _Mykytea.TagsVector_pop(self)
    def __getslice__(self, *args): return _Mykytea.TagsVector___getslice__(self, *args)
    def __setslice__(self, *args): return _Mykytea.TagsVector___setslice__(self, *args)
    def __delslice__(self, *args): return _Mykytea.TagsVector___delslice__(self, *args)
    def __delitem__(self, *args): return _Mykytea.TagsVector___delitem__(self, *args)
    def __getitem__(self, *args): return _Mykytea.TagsVector___getitem__(self, *args)
    def __setitem__(self, *args): return _Mykytea.TagsVector___setitem__(self, *args)
    def append(self, *args): return _Mykytea.TagsVector_append(self, *args)
    def empty(self): return _Mykytea.TagsVector_empty(self)
    def size(self): return _Mykytea.TagsVector_size(self)
    def clear(self): return _Mykytea.TagsVector_clear(self)
    def swap(self, *args): return _Mykytea.TagsVector_swap(self, *args)
    def get_allocator(self): return _Mykytea.TagsVector_get_allocator(self)
    def begin(self): return _Mykytea.TagsVector_begin(self)
    def end(self): return _Mykytea.TagsVector_end(self)
    def rbegin(self): return _Mykytea.TagsVector_rbegin(self)
    def rend(self): return _Mykytea.TagsVector_rend(self)
    def pop_back(self): return _Mykytea.TagsVector_pop_back(self)
    def erase(self, *args): return _Mykytea.TagsVector_erase(self, *args)
    def __init__(self, *args): 
        this = _Mykytea.new_TagsVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _Mykytea.TagsVector_push_back(self, *args)
    def front(self): return _Mykytea.TagsVector_front(self)
    def back(self): return _Mykytea.TagsVector_back(self)
    def assign(self, *args): return _Mykytea.TagsVector_assign(self, *args)
    def resize(self, *args): return _Mykytea.TagsVector_resize(self, *args)
    def insert(self, *args): return _Mykytea.TagsVector_insert(self, *args)
    def reserve(self, *args): return _Mykytea.TagsVector_reserve(self, *args)
    def capacity(self): return _Mykytea.TagsVector_capacity(self)
    __swig_destroy__ = _Mykytea.delete_TagsVector
    __del__ = lambda self : None;
TagsVector_swigregister = _Mykytea.TagsVector_swigregister
TagsVector_swigregister(TagsVector)

class Kytea(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Kytea, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Kytea, name)
    __repr__ = _swig_repr
    def readModel(self, *args): return _Mykytea.Kytea_readModel(self, *args)
    def writeModel(self, *args): return _Mykytea.Kytea_writeModel(self, *args)
    def calculateWS(self, *args): return _Mykytea.Kytea_calculateWS(self, *args)
    def calculateTags(self, *args): return _Mykytea.Kytea_calculateTags(self, *args)
    def calculateUnknownTag(self, *args): return _Mykytea.Kytea_calculateUnknownTag(self, *args)
    def getStringUtil(self): return _Mykytea.Kytea_getStringUtil(self)
    def getConfig(self): return _Mykytea.Kytea_getConfig(self)
    def trainAll(self): return _Mykytea.Kytea_trainAll(self)
    def analyze(self): return _Mykytea.Kytea_analyze(self)
    def init(self): return _Mykytea.Kytea_init(self)
    def __init__(self, *args): 
        this = _Mykytea.new_Kytea(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Mykytea.delete_Kytea
    __del__ = lambda self : None;
    def getWSModel(self): return _Mykytea.Kytea_getWSModel(self)
    def setWSModel(self, *args): return _Mykytea.Kytea_setWSModel(self, *args)
    def checkEqual(self, *args): return _Mykytea.Kytea_checkEqual(self, *args)
Kytea_swigregister = _Mykytea.Kytea_swigregister
Kytea_swigregister(Kytea)


def __lt__(*args):
  return _Mykytea.__lt__(*args)
__lt__ = _Mykytea.__lt__
class KyteaWord(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, KyteaWord, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, KyteaWord, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Mykytea.new_KyteaWord(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["surface"] = _Mykytea.KyteaWord_surface_set
    __swig_getmethods__["surface"] = _Mykytea.KyteaWord_surface_get
    if _newclass:surface = _swig_property(_Mykytea.KyteaWord_surface_get, _Mykytea.KyteaWord_surface_set)
    __swig_setmethods__["norm"] = _Mykytea.KyteaWord_norm_set
    __swig_getmethods__["norm"] = _Mykytea.KyteaWord_norm_get
    if _newclass:norm = _swig_property(_Mykytea.KyteaWord_norm_get, _Mykytea.KyteaWord_norm_set)
    __swig_setmethods__["tags"] = _Mykytea.KyteaWord_tags_set
    __swig_getmethods__["tags"] = _Mykytea.KyteaWord_tags_get
    if _newclass:tags = _swig_property(_Mykytea.KyteaWord_tags_get, _Mykytea.KyteaWord_tags_set)
    __swig_setmethods__["isCertain"] = _Mykytea.KyteaWord_isCertain_set
    __swig_getmethods__["isCertain"] = _Mykytea.KyteaWord_isCertain_get
    if _newclass:isCertain = _swig_property(_Mykytea.KyteaWord_isCertain_get, _Mykytea.KyteaWord_isCertain_set)
    __swig_setmethods__["unknown"] = _Mykytea.KyteaWord_unknown_set
    __swig_getmethods__["unknown"] = _Mykytea.KyteaWord_unknown_get
    if _newclass:unknown = _swig_property(_Mykytea.KyteaWord_unknown_get, _Mykytea.KyteaWord_unknown_set)
    def limitTags(self, *args): return _Mykytea.KyteaWord_limitTags(self, *args)
    def getNumTags(self): return _Mykytea.KyteaWord_getNumTags(self)
    def getTag(self, *args): return _Mykytea.KyteaWord_getTag(self, *args)
    def getTags(self, *args): return _Mykytea.KyteaWord_getTags(self, *args)
    def getTagSurf(self, *args): return _Mykytea.KyteaWord_getTagSurf(self, *args)
    def getTagConf(self, *args): return _Mykytea.KyteaWord_getTagConf(self, *args)
    def setTag(self, *args): return _Mykytea.KyteaWord_setTag(self, *args)
    def setTagConf(self, *args): return _Mykytea.KyteaWord_setTagConf(self, *args)
    def clearTags(self, *args): return _Mykytea.KyteaWord_clearTags(self, *args)
    def addTag(self, *args): return _Mykytea.KyteaWord_addTag(self, *args)
    def setUnknown(self, *args): return _Mykytea.KyteaWord_setUnknown(self, *args)
    def getUnknown(self): return _Mykytea.KyteaWord_getUnknown(self)
    def hasTag(self, *args): return _Mykytea.KyteaWord_hasTag(self, *args)
    __swig_destroy__ = _Mykytea.delete_KyteaWord
    __del__ = lambda self : None;
KyteaWord_swigregister = _Mykytea.KyteaWord_swigregister
KyteaWord_swigregister(KyteaWord)

class KyteaSentence(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, KyteaSentence, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, KyteaSentence, name)
    __repr__ = _swig_repr
    __swig_setmethods__["surface"] = _Mykytea.KyteaSentence_surface_set
    __swig_getmethods__["surface"] = _Mykytea.KyteaSentence_surface_get
    if _newclass:surface = _swig_property(_Mykytea.KyteaSentence_surface_get, _Mykytea.KyteaSentence_surface_set)
    __swig_setmethods__["norm"] = _Mykytea.KyteaSentence_norm_set
    __swig_getmethods__["norm"] = _Mykytea.KyteaSentence_norm_get
    if _newclass:norm = _swig_property(_Mykytea.KyteaSentence_norm_get, _Mykytea.KyteaSentence_norm_set)
    __swig_setmethods__["wsConfs"] = _Mykytea.KyteaSentence_wsConfs_set
    __swig_getmethods__["wsConfs"] = _Mykytea.KyteaSentence_wsConfs_get
    if _newclass:wsConfs = _swig_property(_Mykytea.KyteaSentence_wsConfs_get, _Mykytea.KyteaSentence_wsConfs_set)
    __swig_setmethods__["words"] = _Mykytea.KyteaSentence_words_set
    __swig_getmethods__["words"] = _Mykytea.KyteaSentence_words_get
    if _newclass:words = _swig_property(_Mykytea.KyteaSentence_words_get, _Mykytea.KyteaSentence_words_set)
    def __init__(self, *args): 
        this = _Mykytea.new_KyteaSentence(*args)
        try: self.this.append(this)
        except: self.this = this
    def refreshWS(self, *args): return _Mykytea.KyteaSentence_refreshWS(self, *args)
    __swig_destroy__ = _Mykytea.delete_KyteaSentence
    __del__ = lambda self : None;
KyteaSentence_swigregister = _Mykytea.KyteaSentence_swigregister
KyteaSentence_swigregister(KyteaSentence)

class Tags(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Tags, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Tags, name)
    __repr__ = _swig_repr
    __swig_setmethods__["surface"] = _Mykytea.Tags_surface_set
    __swig_getmethods__["surface"] = _Mykytea.Tags_surface_get
    if _newclass:surface = _swig_property(_Mykytea.Tags_surface_get, _Mykytea.Tags_surface_set)
    __swig_setmethods__["tag"] = _Mykytea.Tags_tag_set
    __swig_getmethods__["tag"] = _Mykytea.Tags_tag_get
    if _newclass:tag = _swig_property(_Mykytea.Tags_tag_get, _Mykytea.Tags_tag_set)
    def __init__(self): 
        this = _Mykytea.new_Tags()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Mykytea.delete_Tags
    __del__ = lambda self : None;
Tags_swigregister = _Mykytea.Tags_swigregister
Tags_swigregister(Tags)

class Mykytea(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Mykytea, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Mykytea, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Mykytea.new_Mykytea(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Mykytea.delete_Mykytea
    __del__ = lambda self : None;
    def getWS(self, *args): return _Mykytea.Mykytea_getWS(self, *args)
    def getTags(self, *args): return _Mykytea.Mykytea_getTags(self, *args)
    def getAllTags(self, *args): return _Mykytea.Mykytea_getAllTags(self, *args)
    def getTagsToString(self, *args): return _Mykytea.Mykytea_getTagsToString(self, *args)
Mykytea_swigregister = _Mykytea.Mykytea_swigregister
Mykytea_swigregister(Mykytea)



